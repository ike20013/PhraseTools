#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KeyPhrase Manager - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ KeyCollector/KeyAssort
–ê–≤—Ç–æ—Ä: Assistant
Python 3.11+ / macOS
"""

import sys
import re
import copy
from pathlib import Path
from typing import List, Dict, Set, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict, deque
import pandas as pd
from transliterate import translit

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QFileDialog, QTabWidget, QSplitter,
    QTableWidget, QTableWidgetItem, QHeaderView, QMenu,
    QMessageBox, QListWidget, QGroupBox, QLineEdit,
    QComboBox, QProgressBar, QStatusBar, QTextEdit,
    QAbstractItemView, QTreeWidget, QTreeWidgetItem,
    QCheckBox, QSpinBox
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt6.QtGui import (
    QAction, QFont, QPalette, QColor, QBrush,
    QKeySequence, QShortcut, QTextCharFormat, QTextCursor
)


@dataclass
class Phrase:
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—Ä–∞–∑—ã"""
    text: str
    frequency: int = 0
    source_file: str = ""

    def __hash__(self):
        return hash(self.text.lower())

    def __eq__(self, other):
        if isinstance(other, Phrase):
            return self.text.lower() == other.text.lower()
        return False


class HistoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è undo/redo"""

    def __init__(self, max_history=50):
        self.history = deque(maxlen=max_history)
        self.current_index = -1
        self.initial_state = None

    def set_initial_state(self, state: List[Tuple[str, int]]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.initial_state = copy.deepcopy(state)
        self.history.clear()
        self.history.append(copy.deepcopy(state))
        self.current_index = 0

    def add_state(self, state: List[Tuple[str, int]]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        while len(self.history) > self.current_index + 1:
            self.history.pop()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.history.append(copy.deepcopy(state))
        self.current_index = len(self.history) - 1

    def undo(self) -> Optional[List[Tuple[str, int]]]:
        """–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if self.current_index > 0:
            self.current_index -= 1
            return copy.deepcopy(self.history[self.current_index])
        return None

    def redo(self) -> Optional[List[Tuple[str, int]]]:
        """–ü–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if self.current_index < len(self.history) - 1:
            self.current_index += 1
            return copy.deepcopy(self.history[self.current_index])
        return None

    def can_undo(self) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å"""
        return self.current_index > 0

    def can_redo(self) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å"""
        return self.current_index < len(self.history) - 1


class PhraseProcessor:
    """–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–∞–∑"""

    @staticmethod
    def remove_duplicates(phrases: List[Tuple[str, int]]) -> List[Tuple[str, int]]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞"""
        seen = set()
        result = []
        for phrase, freq in phrases:
            phrase_lower = phrase.lower().strip()
            if phrase_lower not in seen:
                seen.add(phrase_lower)
                result.append((phrase.strip(), freq))
        return result

    @staticmethod
    def sort_phrases_alphabetically(phrases: List[Tuple[str, int]], reverse: bool = False) -> List[Tuple[str, int]]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ—Ä–∞–∑ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É"""
        return sorted(phrases, key=lambda x: x[0].lower(), reverse=reverse)

    @staticmethod
    def sort_phrases_by_frequency(phrases: List[Tuple[str, int]], reverse: bool = True) -> List[Tuple[str, int]]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ—Ä–∞–∑ –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏"""
        return sorted(phrases, key=lambda x: x[1], reverse=reverse)

    @staticmethod
    def transliterate_phrases(phrases: List[Tuple[str, int]], reverse: bool = False) -> List[Tuple[str, int]]:
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑ (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è)"""
        result = []
        for phrase, freq in phrases:
            try:
                if reverse:
                    # –° –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (–æ–±—Ä–∞—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è)
                    if not re.search('[–∞-—è–ê-–Ø]', phrase):
                        result.append((translit(phrase, 'ru', reversed=False), freq))
                    else:
                        result.append((phrase, freq))
                else:
                    # –° —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                    if re.search('[–∞-—è–ê-–Ø]', phrase):
                        result.append((translit(phrase, 'ru', reversed=True), freq))
                    else:
                        result.append((phrase, freq))
            except:
                result.append((phrase, freq))
        return result

    @staticmethod
    def filter_by_stop_words(phrases: List[Tuple[str, int]], stop_words: Set[str]) -> List[Tuple[str, int]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º"""
        if not stop_words:
            return phrases

        result = []
        for phrase, freq in phrases:
            phrase_words = set(phrase.lower().split())
            if not phrase_words.intersection(stop_words):
                result.append((phrase, freq))
        return result

    @staticmethod
    def remove_special_chars(phrases: List[Tuple[str, int]]) -> List[Tuple[str, int]]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
        result = []
        for phrase, freq in phrases:
            # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
            cleaned = re.sub(r'[^\w\s]', ' ', phrase)
            # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned = re.sub(r'\s+', ' ', cleaned).strip()
            if cleaned:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                result.append((cleaned, freq))
        return result

    @staticmethod
    def convert_case(phrases: List[Tuple[str, int]], to_upper: bool) -> List[Tuple[str, int]]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        result = []
        for phrase, freq in phrases:
            if to_upper:
                result.append((phrase.upper(), freq))
            else:
                result.append((phrase.lower(), freq))
        return result

    @staticmethod
    def remove_long_phrases(phrases: List[Tuple[str, int]], max_words: int = 7) -> List[Tuple[str, int]]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –¥–ª–∏–Ω–Ω–µ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤"""
        result = []
        for phrase, freq in phrases:
            if len(phrase.split()) <= max_words:
                result.append((phrase, freq))
        return result

    @staticmethod
    def group_phrases(phrases: List[Tuple[str, int]]) -> Dict[str, List[Tuple[str, int]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ—Ä–∞–∑ –ø–æ –æ–±—â–∏–º —Å–ª–æ–≤–∞–º"""
        groups = defaultdict(list)

        for phrase, freq in phrases:
            words = phrase.lower().split()
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            word_freq = defaultdict(int)
            for word in words:
                if len(word) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                    word_freq[word] += 1

            if word_freq:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∞–º–æ–º—É –¥–ª–∏–Ω–Ω–æ–º—É –∑–Ω–∞—á–∏–º–æ–º—É —Å–ª–æ–≤—É
                main_word = max(word_freq.keys(), key=len)
                groups[main_word].append((phrase, freq))
            else:
                groups['–¥—Ä—É–≥–æ–µ'].append((phrase, freq))

        return dict(groups)


class SearchWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ—Ä–∞–∑–∞–º"""

    search_changed = pyqtSignal(str, bool)  # —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞, —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

    def __init__(self):
        super().__init__()
        self.setup_ui()

    def setup_ui(self):
        layout = QHBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–∞–º...")
        self.search_input.textChanged.connect(self.on_search_changed)
        self.search_input.setStyleSheet("""
            QLineEdit {
                padding: 8px 12px;
                border: 2px solid #e0e0e0;
                border-radius: 20px;
                background-color: #ffffff;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 2px solid #007aff;
            }
        """)
        layout.addWidget(self.search_input)

        # –ß–µ–∫–±–æ–∫—Å "–¢–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
        self.only_matches = QCheckBox("–¢–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        self.only_matches.setStyleSheet("QCheckBox { font-size: 13px; }")
        self.only_matches.toggled.connect(self.on_filter_changed)
        layout.addWidget(self.only_matches)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.prev_btn = QPushButton("‚óÄ")
        self.prev_btn.setFixedSize(35, 35)
        self.prev_btn.setEnabled(False)
        self.prev_btn.setStyleSheet("""
            QPushButton {
                background-color: #f0f0f0;
                border: 1px solid #d0d0d0;
                border-radius: 17px;
                font-size: 16px;
            }
            QPushButton:hover:enabled {
                background-color: #007aff;
                color: white;
            }
            QPushButton:disabled {
                background-color: #f8f8f8;
                color: #c0c0c0;
            }
        """)
        layout.addWidget(self.prev_btn)

        self.next_btn = QPushButton("‚ñ∂")
        self.next_btn.setFixedSize(35, 35)
        self.next_btn.setEnabled(False)
        self.next_btn.setStyleSheet("""
            QPushButton {
                background-color: #f0f0f0;
                border: 1px solid #d0d0d0;
                border-radius: 17px;
                font-size: 16px;
            }
            QPushButton:hover:enabled {
                background-color: #007aff;
                color: white;
            }
            QPushButton:disabled {
                background-color: #f8f8f8;
                color: #c0c0c0;
            }
        """)
        layout.addWidget(self.next_btn)

        # –°—á–µ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_label = QLabel("")
        self.result_label.setStyleSheet("""
            QLabel {
                font-size: 13px;
                font-weight: 500;
                color: #007aff;
                padding: 5px 10px;
                background-color: #e6f2ff;
                border-radius: 10px;
            }
        """)
        layout.addWidget(self.result_label)

        layout.addStretch()
        self.setLayout(layout)

    def on_search_changed(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞"""
        text = self.search_input.text()
        self.search_changed.emit(text, self.only_matches.isChecked())

        # –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        has_text = bool(text)
        self.prev_btn.setEnabled(has_text)
        self.next_btn.setEnabled(has_text)

    def on_filter_changed(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"""
        self.on_search_changed()

    def update_results(self, current: int, total: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if total > 0:
            self.result_label.setText(f"–ù–∞–π–¥–µ–Ω–æ: {current}/{total}")
            self.result_label.show()
        else:
            self.result_label.hide()


class FrequencyTableWidgetItem(QTableWidgetItem):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏"""

    def __init__(self, value: int):
        super().__init__(str(value))
        self.value = value

    def __lt__(self, other):
        if isinstance(other, FrequencyTableWidgetItem):
            return self.value < other.value
        return super().__lt__(other)


class MainPhraseTable(QTableWidget):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.processor = PhraseProcessor()
        self.history = HistoryManager()
        self.stop_words = set()
        self.original_data = []  # –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.current_data = []  # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        self.search_text = ""
        self.search_only_matches = False
        self.search_results = []
        self.current_search_index = 0
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.setColumnCount(3)
        self.setHorizontalHeaderLabels(["‚úì", "–§—Ä–∞–∑–∞", "–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å"])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)
        self.setColumnWidth(0, 30)
        self.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        # –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)

        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        self.setSortingEnabled(True)

        # –°—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã
        self.setStyleSheet("""
            QTableWidget {
                background-color: #ffffff;
                color: #000000;
                gridline-color: #d0d0d0;
                border: 1px solid #d0d0d0;
                font-family: "SF Pro Display", -apple-system, sans-serif;
                font-size: 13px;
            }
            QTableWidget::item {
                padding: 4px;
                border-bottom: 1px solid #e0e0e0;
            }
            QTableWidget::item:selected {
                background-color: #007aff;
                color: white;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                color: #333333;
                padding: 6px;
                border: none;
                border-bottom: 2px solid #d0d0d0;
                font-weight: 500;
            }
        """)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.setAlternatingRowColors(True)
        self.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.verticalHeader().setVisible(False)

    def _get_table_data(self) -> List[Tuple[str, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
        data = []
        for row in range(self.rowCount()):
            phrase = self.item(row, 1).text()
            freq_item = self.item(row, 2)
            if isinstance(freq_item, FrequencyTableWidgetItem):
                freq = freq_item.value
            else:
                freq = int(freq_item.text()) if freq_item.text().isdigit() else 0
            data.append((phrase, freq))
        return data

    def sortByColumn(self, column: int, order: Qt.SortOrder):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.save_state()
        super().sortByColumn(column, order)
        self.current_data = self._get_table_data()
        self.history.add_state(self.current_data)

    def contextMenuEvent(self, event):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu = QMenu(self)
        menu.setStyleSheet("""
            QMenu {
                background-color: #ffffff;
                color: #000000;
                border: 1px solid #d0d0d0;
                border-radius: 6px;
                padding: 5px;
            }
            QMenu::item:selected {
                background-color: #007aff;
                color: white;
                border-radius: 4px;
            }
        """)

        clicked_row = self.rowAt(event.pos().y())

        if clicked_row != -1:
            delete_row_action = menu.addAction("üóë –£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É")
            delete_row_action.triggered.connect(lambda: self.delete_row(clicked_row))
            menu.addSeparator()

        # –î–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        select_all = menu.addAction("‚òëÔ∏è –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ")
        select_all.triggered.connect(self.select_all)

        deselect_all = menu.addAction("‚¨ú –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ")
        deselect_all.triggered.connect(self.deselect_all)

        menu.addSeparator()

        # –î–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é
        copy_action = menu.addAction("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        copy_action.triggered.connect(self.copy_selected)

        delete_selected = menu.addAction("üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        delete_selected.triggered.connect(self.delete_selected)

        menu.addSeparator()

        remove_duplicates = menu.addAction("üîÑ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã")
        remove_duplicates.triggered.connect(self.remove_duplicates)

        remove_special = menu.addAction("üßπ –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã")
        remove_special.triggered.connect(self.remove_special_chars)

        remove_long = menu.addAction("‚úÇÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—ã > 7 —Å–ª–æ–≤")
        remove_long.triggered.connect(self.remove_long_phrases)

        menu.addSeparator()

        sort_az = menu.addAction("‚¨ÜÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ê-–Ø")
        sort_az.triggered.connect(lambda: self.sort_alphabetically(False))

        sort_za = menu.addAction("‚¨áÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ø-–ê")
        sort_za.triggered.connect(lambda: self.sort_alphabetically(True))

        sort_freq_high = menu.addAction("üìä –ü–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ ‚Üì")
        sort_freq_high.triggered.connect(lambda: self.sort_by_frequency(True))

        sort_freq_low = menu.addAction("üìä –ü–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ ‚Üë")
        sort_freq_low.triggered.connect(lambda: self.sort_by_frequency(False))

        menu.addSeparator()

        to_upper = menu.addAction("üî† –í –í–ï–†–•–ù–ò–ô –†–ï–ì–ò–°–¢–†")
        to_upper.triggered.connect(lambda: self.convert_case(True))

        to_lower = menu.addAction("üî° –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä")
        to_lower.triggered.connect(lambda: self.convert_case(False))

        menu.addSeparator()

        transliterate = menu.addAction("üî§ –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è RU‚ÜíEN")
        transliterate.triggered.connect(lambda: self.transliterate(False))

        transliterate_back = menu.addAction("üî§ –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è EN‚ÜíRU")
        transliterate_back.triggered.connect(lambda: self.transliterate(True))

        menu.exec(event.globalPos())

    def select_all(self):
        """–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ —Ñ—Ä–∞–∑—ã"""
        for row in range(self.rowCount()):
            if self.item(row, 0):
                self.item(row, 0).setCheckState(Qt.CheckState.Checked)

    def deselect_all(self):
        """–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ñ—Ä–∞–∑"""
        for row in range(self.rowCount()):
            if self.item(row, 0):
                self.item(row, 0).setCheckState(Qt.CheckState.Unchecked)

    def delete_selected(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.save_state()

        # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        new_data = []
        for row in range(self.rowCount()):
            if self.item(row, 0).checkState() != Qt.CheckState.Checked:
                phrase = self.item(row, 1).text()
                freq_item = self.item(row, 2)
                if isinstance(freq_item, FrequencyTableWidgetItem):
                    freq = freq_item.value
                else:
                    freq = int(freq_item.text()) if freq_item.text().isdigit() else 0
                new_data.append((phrase, freq))

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.current_data = new_data
        self.update_table(self.current_data, save_history=False)
        self.history.add_state(self.current_data)

    def delete_row(self, row: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏"""
        if row < 0 or row >= self.rowCount():
            return
        self.save_state()
        new_data = []
        for i in range(self.rowCount()):
            if i == row:
                continue
            phrase = self.item(i, 1).text()
            freq_item = self.item(i, 2)
            if isinstance(freq_item, FrequencyTableWidgetItem):
                freq = freq_item.value
            else:
                freq = int(freq_item.text()) if freq_item.text().isdigit() else 0
            new_data.append((phrase, freq))
        self.current_data = new_data
        self.update_table(self.current_data, save_history=False)
        self.history.add_state(self.current_data)

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        self.history.add_state(self.current_data)

    def undo(self):
        """–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        state = self.history.undo()
        if state:
            self.current_data = state
            self.update_table(self.current_data, save_history=False)

    def redo(self):
        """–ü–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        state = self.history.redo()
        if state:
            self.current_data = state
            self.update_table(self.current_data, save_history=False)

    def load_phrases(self, phrases: List[Phrase]):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.original_data = [(p.text, p.frequency) for p in phrases]
        self.current_data = self.original_data.copy()
        self.history.set_initial_state(self.current_data)
        self.update_table(self.current_data, save_history=False)

    def update_table(self, data: List[Tuple[str, int]], save_history: bool = True):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if save_history:
            self.save_state()

        self.current_data = data

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–æ–ø-—Å–ª–æ–≤
        filtered_data = data
        if self.stop_words:
            filtered_data = self.processor.filter_by_stop_words(data, self.stop_words)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        display_data = filtered_data
        if self.search_text and self.search_only_matches:
            display_data = [
                (phrase, freq) for phrase, freq in filtered_data
                if self.search_text.lower() in phrase.lower()
            ]

        self.setRowCount(len(display_data))

        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.search_results = []

        for i, (phrase, freq) in enumerate(display_data):
            # –ß–µ–∫–±–æ–∫—Å
            checkbox = QTableWidgetItem()
            checkbox.setCheckState(Qt.CheckState.Unchecked)
            self.setItem(i, 0, checkbox)

            # –§—Ä–∞–∑–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –ø–æ–∏—Å–∫–∞
            phrase_item = QTableWidgetItem(phrase)

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if self.search_text and self.search_text.lower() in phrase.lower():
                phrase_item.setBackground(QBrush(QColor(255, 243, 179)))  # –ú—è–≥–∫–∏–π –∂–µ–ª—Ç—ã–π
                phrase_item.setForeground(QBrush(QColor(50, 50, 50)))  # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
                self.search_results.append(i)

            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
            color = self.get_frequency_color(freq)
            if not self.search_text or self.search_text.lower() not in phrase.lower():
                phrase_item.setBackground(QBrush(color))

            self.setItem(i, 1, phrase_item)

            # –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            freq_item = FrequencyTableWidgetItem(freq)
            freq_item.setTextAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)
            freq_item.setBackground(QBrush(color))

            self.setItem(i, 2, freq_item)

    def get_frequency_color(self, freq: int) -> QColor:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏"""
        if freq >= 100000:
            return QColor(255, 220, 220)  # –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
        elif freq >= 10000:
            return QColor(255, 235, 215)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        elif freq >= 1000:
            return QColor(255, 250, 220)  # –ñ–µ–ª—Ç—ã–π
        elif freq >= 100:
            return QColor(235, 255, 235)  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        else:
            return QColor(250, 250, 250)  # –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–π

    def set_stop_words(self, stop_words: Set[str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        self.stop_words = stop_words
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∞ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏
        self.update_table(self.current_data, save_history=False)

    def set_search(self, text: str, only_matches: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.search_text = text
        self.search_only_matches = only_matches
        self.current_search_index = 0
        self.update_table(self.current_data, save_history=False)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if self.search_results and not only_matches:
            self.scrollToItem(self.item(self.search_results[0], 1))
            self.selectRow(self.search_results[0])

    def next_search_result(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞"""
        if self.search_results:
            self.current_search_index = (self.current_search_index + 1) % len(self.search_results)
            row = self.search_results[self.current_search_index]
            self.scrollToItem(self.item(row, 1))
            self.selectRow(row)
            return self.current_search_index + 1, len(self.search_results)
        return 0, 0

    def prev_search_result(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞"""
        if self.search_results:
            self.current_search_index = (self.current_search_index - 1) % len(self.search_results)
            row = self.search_results[self.current_search_index]
            self.scrollToItem(self.item(row, 1))
            self.selectRow(row)
            return self.current_search_index + 1, len(self.search_results)
        return 0, 0

    def get_current_data(self) -> List[Tuple[str, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        return self.current_data.copy()

    def copy_selected(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        selected = []
        for row in range(self.rowCount()):
            if self.item(row, 0).checkState() == Qt.CheckState.Checked:
                phrase = self.item(row, 1).text()
                selected.append(phrase)

        if selected:
            clipboard = QApplication.clipboard()
            clipboard.setText('\n'.join(selected))

    def remove_duplicates(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        self.save_state()
        data = self.processor.remove_duplicates(self.current_data)
        self.current_data = data
        self.update_table(data, save_history=False)
        self.history.add_state(self.current_data)

    def remove_special_chars(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"""
        self.save_state()
        data = self.processor.remove_special_chars(self.current_data)
        self.current_data = data
        self.update_table(data, save_history=False)
        self.history.add_state(self.current_data)

    def remove_long_phrases(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        self.save_state()
        data = self.processor.remove_long_phrases(self.current_data, 7)
        self.current_data = data
        self.update_table(data, save_history=False)
        self.history.add_state(self.current_data)

    def convert_case(self, to_upper: bool):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        self.save_state()
        data = self.processor.convert_case(self.current_data, to_upper)
        self.current_data = data
        self.update_table(data, save_history=False)
        self.history.add_state(self.current_data)

    def sort_alphabetically(self, reverse: bool):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É"""
        self.save_state()
        data = self.processor.sort_phrases_alphabetically(self.current_data, reverse)
        self.current_data = data
        self.update_table(data, save_history=False)
        self.history.add_state(self.current_data)

    def sort_by_frequency(self, reverse: bool):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏"""
        self.save_state()
        data = self.processor.sort_phrases_by_frequency(self.current_data, reverse)
        self.current_data = data
        self.update_table(data, save_history=False)
        self.history.add_state(self.current_data)

    def transliterate(self, reverse: bool = False):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑"""
        self.save_state()
        data = self.processor.transliterate_phrases(self.current_data, reverse)
        self.current_data = data
        self.update_table(data, save_history=False)
        self.history.add_state(self.current_data)


class FileLoader(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    progress = pyqtSignal(int)
    finished = pyqtSignal(list)
    error = pyqtSignal(str)

    def __init__(self, file_paths: List[str]):
        super().__init__()
        self.file_paths = file_paths

    def run(self):
        all_phrases = []

        for i, file_path in enumerate(self.file_paths):
            try:
                path = Path(file_path)

                if path.suffix.lower() in ['.xls', '.xlsx']:
                    df = pd.read_excel(file_path)
                    if len(df.columns) >= 2:
                        for _, row in df.iterrows():
                            phrase = str(row.iloc[0]).strip()
                            freq = int(row.iloc[1]) if pd.notna(row.iloc[1]) else 0
                            all_phrases.append(Phrase(phrase, freq, path.name))
                    else:
                        phrases = df.iloc[:, 0].astype(str).str.strip().tolist()
                        all_phrases.extend([Phrase(p, 0, path.name) for p in phrases])

                elif path.suffix.lower() == '.txt':
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        for line in lines:
                            parts = line.strip().split('\t')
                            phrase = parts[0]
                            freq = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0
                            all_phrases.append(Phrase(phrase, freq, path.name))

                self.progress.emit(int((i + 1) / len(self.file_paths) * 100))

            except Exception as e:
                self.error.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {path.name}: {str(e)}")

        self.finished.emit(all_phrases)


class StopWordsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏"""

    stop_words_changed = pyqtSignal(set)

    def __init__(self):
        super().__init__()
        self.stop_words = set()
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(10, 10, 10, 10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–∞")
        header.setFont(QFont("SF Pro Display", 14, QFont.Weight.Bold))
        layout.addWidget(header)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_field = QLineEdit()
        self.input_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
        self.input_field.returnPressed.connect(self.add_stop_word)
        self.input_field.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 1px solid #d0d0d0;
                border-radius: 6px;
                background-color: #ffffff;
                color: #000000;
            }
        """)
        layout.addWidget(self.input_field)

        # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤
        self.list_widget = QListWidget()
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #ffffff;
                color: #000000;
                border: 1px solid #d0d0d0;
                border-radius: 6px;
            }
            QListWidget::item {
                padding: 4px;
            }
            QListWidget::item:selected {
                background-color: #007aff;
                color: white;
            }
        """)
        layout.addWidget(self.list_widget)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        self.remove_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")
        self.remove_btn.clicked.connect(self.remove_stop_word)
        btn_layout.addWidget(self.remove_btn)

        self.clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        self.clear_btn.clicked.connect(self.clear_stop_words)
        btn_layout.addWidget(self.clear_btn)

        layout.addLayout(btn_layout)

        self.setLayout(layout)

    def add_stop_word(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞"""
        word = self.input_field.text().strip().lower()
        if word and word not in self.stop_words:
            self.stop_words.add(word)
            self.list_widget.addItem(word)
            self.input_field.clear()
            self.stop_words_changed.emit(self.stop_words)

    def remove_stop_word(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞"""
        current_item = self.list_widget.currentItem()
        if current_item:
            word = current_item.text()
            self.stop_words.discard(word)
            self.list_widget.takeItem(self.list_widget.row(current_item))
            self.stop_words_changed.emit(self.stop_words)

    def clear_stop_words(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–æ–ø-—Å–ª–æ–≤"""
        self.stop_words.clear()
        self.list_widget.clear()
        self.stop_words_changed.emit(self.stop_words)


class GroupingWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ—Ä–∞–∑ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞"""

    def __init__(self):
        super().__init__()
        self.groups = {}
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(10, 10, 10, 10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        header_layout = QHBoxLayout()

        header = QLabel("üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ—Ä–∞–∑")
        header.setFont(QFont("SF Pro Display", 14, QFont.Weight.Bold))
        header_layout.addWidget(header)

        header_layout.addStretch()

        self.export_btn = QPushButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        self.export_btn.clicked.connect(self.export_groups)
        header_layout.addWidget(self.export_btn)

        layout.addLayout(header_layout)

        # –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø
        self.tree = QTreeWidget()
        self.tree.setHeaderLabels(["–ì—Ä—É–ø–ø–∞ / –§—Ä–∞–∑–∞", "–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å"])
        self.tree.setStyleSheet("""
            QTreeWidget {
                background-color: #ffffff;
                color: #000000;
                border: 1px solid #d0d0d0;
                border-radius: 6px;
            }
            QTreeWidget::item {
                padding: 2px;
            }
            QTreeWidget::item:selected {
                background-color: #007aff;
                color: white;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                color: #333333;
                padding: 6px;
                border: none;
                border-bottom: 1px solid #d0d0d0;
                font-weight: 500;
            }
        """)
        layout.addWidget(self.tree)

        self.setLayout(layout)

    def update_groups(self, phrases: List[Tuple[str, int]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø"""
        processor = PhraseProcessor()
        self.groups = processor.group_phrases(phrases)

        self.tree.clear()

        for group_name, group_phrases in self.groups.items():
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
            group_item = QTreeWidgetItem(self.tree)
            group_item.setText(0, f"üìÅ {group_name} ({len(group_phrases)} —Ñ—Ä–∞–∑)")
            group_item.setExpanded(True)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—ã –≤ –≥—Ä—É–ø–ø—É
            for phrase, freq in group_phrases:
                phrase_item = QTreeWidgetItem(group_item)
                phrase_item.setText(0, phrase)
                phrase_item.setText(1, str(freq))

                # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
                if freq >= 100000:
                    phrase_item.setBackground(1, QBrush(QColor(255, 220, 220)))
                elif freq >= 10000:
                    phrase_item.setBackground(1, QBrush(QColor(255, 235, 215)))
                elif freq >= 1000:
                    phrase_item.setBackground(1, QBrush(QColor(255, 250, 220)))
                elif freq >= 100:
                    phrase_item.setBackground(1, QBrush(QColor(235, 255, 235)))

    def export_groups(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø–ø –≤ Excel"""
        if not self.groups:
            QMessageBox.warning(None, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        file_path, _ = QFileDialog.getSaveFileName(
            None,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—ã",
            "groups.xlsx",
            "Excel files (*.xlsx)"
        )

        if file_path:
            try:
                with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                    for group_name, group_phrases in self.groups.items():
                        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä—É–ø–ø—ã
                        df = pd.DataFrame(group_phrases, columns=['–§—Ä–∞–∑–∞', '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å'])

                        # –û–±—Ä–µ–∑–∞–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –¥–æ 31 —Å–∏–º–≤–æ–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Excel)
                        sheet_name = group_name[:31] if len(group_name) > 31 else group_name

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç
                        df.to_excel(writer, sheet_name=sheet_name, index=False)

                QMessageBox.information(None, "–£—Å–ø–µ—Ö", f"–ì—Ä—É–ø–ø—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {Path(file_path).name}")
            except Exception as e:
                QMessageBox.critical(None, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}")


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.phrases_data = []
        self.setup_ui()
        self.setup_shortcuts()
        self.setup_style()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üîë KeyPhrase Manager - SEO –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
        self.setGeometry(100, 100, 1400, 900)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ì–ª–∞–≤–Ω—ã–π layout —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_layout = QVBoxLayout()
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–æ–ª–µ–µ –ø–ª–æ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        central_widget.setLayout(main_layout)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar_layout = QHBoxLayout()
        toolbar_layout.setContentsMargins(0, 0, 0, 0)

        self.load_btn = QPushButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")
        self.load_btn.clicked.connect(self.load_files)
        toolbar_layout.addWidget(self.load_btn)

        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_file)
        toolbar_layout.addWidget(self.save_btn)

        toolbar_layout.addStretch()

        self.phrase_count_label = QLabel("–§—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: 0")
        self.phrase_count_label.setFont(QFont("SF Pro Display", 12))
        toolbar_layout.addWidget(self.phrase_count_label)

        self.filtered_count_label = QLabel("")
        self.filtered_count_label.setFont(QFont("SF Pro Display", 12))
        self.filtered_count_label.setStyleSheet("color: #007aff;")
        toolbar_layout.addWidget(self.filtered_count_label)

        main_layout.addLayout(toolbar_layout)

        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
        self.search_widget = SearchWidget()
        self.search_widget.search_changed.connect(self.on_search_changed)
        self.search_widget.prev_btn.clicked.connect(self.prev_search)
        self.search_widget.next_btn.clicked.connect(self.next_search)
        main_layout.addWidget(self.search_widget)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        splitter = QSplitter(Qt.Orientation.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        left_panel = QWidget()
        left_layout = QVBoxLayout()
        left_layout.setContentsMargins(0, 0, 0, 0)
        left_layout.setSpacing(5)

        editor_label = QLabel("üìù –§—Ä–∞–∑—ã")
        editor_label.setFont(QFont("SF Pro Display", 14, QFont.Weight.Bold))
        left_layout.addWidget(editor_label)

        self.main_table = MainPhraseTable()
        left_layout.addWidget(self.main_table)

        left_panel.setLayout(left_layout)
        splitter.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #d0d0d0;
                background-color: #ffffff;
                border-radius: 6px;
            }
            QTabBar::tab {
                background-color: #f5f5f5;
                color: #333333;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 6px;
                border-top-right-radius: 6px;
            }
            QTabBar::tab:selected {
                background-color: #007aff;
                color: white;
            }
        """)

        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤
        self.stop_words_widget = StopWordsWidget()
        self.stop_words_widget.stop_words_changed.connect(self.on_stop_words_changed)
        self.tabs.addTab(self.stop_words_widget, "üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–∞")

        # –í–∫–ª–∞–¥–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.grouping_widget = GroupingWidget()
        self.tabs.addTab(self.grouping_widget, "üóÇ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞")

        splitter.addWidget(self.tabs)
        splitter.setSizes([900, 500])

        main_layout.addWidget(splitter)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def setup_shortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # Cmd+Z –¥–ª—è –æ—Ç–º–µ–Ω—ã
        undo_shortcut = QShortcut(QKeySequence("Cmd+Z"), self)
        undo_shortcut.activated.connect(self.main_table.undo)

        # Cmd+Shift+Z –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
        redo_shortcut = QShortcut(QKeySequence("Cmd+Shift+Z"), self)
        redo_shortcut.activated.connect(self.main_table.redo)

        # Cmd+F –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_shortcut = QShortcut(QKeySequence("Cmd+F"), self)
        search_shortcut.activated.connect(lambda: self.search_widget.search_input.setFocus())

    def setup_style(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QPushButton {
                background-color: #007aff;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: 500;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #0051d5;
            }
            QPushButton:pressed {
                background-color: #0041a8;
            }
            QLabel {
                color: #333333;
            }
        """)

    def load_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        file_paths, _ = QFileDialog.getOpenFileNames(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã",
            "",
            "Supported files (*.txt *.xls *.xlsx);;Text files (*.txt);;Excel files (*.xls *.xlsx)"
        )

        if file_paths:
            self.loader = FileLoader(file_paths)
            self.loader.finished.connect(self.on_files_loaded)
            self.loader.error.connect(self.on_load_error)
            self.loader.start()
            self.status_bar.showMessage("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")

    def on_files_loaded(self, phrases: List[Phrase]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.phrases_data.extend(phrases)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        self.main_table.load_phrases(self.phrases_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.update_phrase_count()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
        data = [(p.text, p.frequency) for p in self.phrases_data]
        self.grouping_widget.update_groups(data)

        self.status_bar.showMessage(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(phrases)} —Ñ—Ä–∞–∑")

    def on_load_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"""
        QMessageBox.warning(self, "–û—à–∏–±–∫–∞", error)
        self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

    def on_stop_words_changed(self, stop_words: Set[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤"""
        self.main_table.set_stop_words(stop_words)
        self.update_phrase_count()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        current_data = self.main_table.get_current_data()
        self.grouping_widget.update_groups(current_data)

    def on_search_changed(self, text: str, only_matches: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        self.main_table.set_search(text, only_matches)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if text:
            total = len(self.main_table.search_results)
            if total > 0:
                self.search_widget.update_results(1, total)
            else:
                self.search_widget.update_results(0, 0)

    def next_search(self):
        """–°–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""
        current, total = self.main_table.next_search_result()
        self.search_widget.update_results(current, total)

    def prev_search(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""
        current, total = self.main_table.prev_search_result()
        self.search_widget.update_results(current, total)

    def update_phrase_count(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ñ—Ä–∞–∑"""
        total = len(self.main_table.current_data)
        self.phrase_count_label.setText(f"–í—Å–µ–≥–æ —Ñ—Ä–∞–∑: {total}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if self.stop_words_widget.stop_words:
            filtered = self.main_table.rowCount()
            self.filtered_count_label.setText(f"(–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞: {filtered})")
        else:
            self.filtered_count_label.setText("")

    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª",
            "",
            "Text files (*.txt);;Excel files (*.xlsx)"
        )

        if file_path:
            try:
                data = self.main_table.get_current_data()

                if file_path.endswith('.txt'):
                    with open(file_path, 'w', encoding='utf-8') as f:
                        for phrase, freq in data:
                            f.write(f"{phrase}\t{freq}\n")
                elif file_path.endswith('.xlsx'):
                    df = pd.DataFrame(data, columns=['–§—Ä–∞–∑–∞', '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å'])
                    df.to_excel(file_path, index=False)

                self.status_bar.showMessage(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {Path(file_path).name}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = QApplication(sys.argv)
    app.setStyle('Fusion')

    window = MainWindow()
    window.show()

    sys.exit(app.exec())


if __name__ == "__main__":
    main()